name: Deploy Project

on:
  push:
    branches:
      - main

jobs:
  test_node:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # - name: test node
      #  run: |
      #    ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} `
      #    export NVM_DIR="$HOME/.nvm"
      #    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" || {
      #    echo "nvm.sh not found"
      #    exit 1
      #    }

      #    nvm -v
      #    nvm use --lts
      #    node -v
      #    npm -v`

      - name: check mysql
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} `
          sudo service mysql start`

      - name: test mysql
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} `
          mysql -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "SHOW DATABASES;"`

  test_mongod:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: check mongod
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          sudo service mongod status'

      - name: test mongod user
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} `
          mongosh -u ${{ secrets.MONGO_USER }} -p ${{ secrets.MONGO_PASSWORD }} \
          --authenticationDatabase admin -eval "db.adminCommand({ listDatabases:1 })"`
